from core.ai.assistants import Assistants
from discord.ext import commands
import aimodels._template_ as typehint_AIModelTemplate
import discord
import importlib
import io
import logging

class GeminiQuickChat(commands.Cog):
    def __init__(self, bot):
        self.bot: discord.Bot = bot

    @commands.slash_command(description="Ask Jakey any quick question")
    @commands.cooldown(3, 6, commands.BucketType.user)
    @discord.option("prompt", input_type=str, description="Ask Jakey any question", max_length=4096, required=True)
    async def ask(self, ctx: discord.ApplicationContext, prompt):
        await ctx.response.defer(ephemeral=True)

        Completions = importlib.import_module("aimodels.gemini").Completions
        _infer: typehint_AIModelTemplate.Completions = Completions(
            discord_ctx=ctx,
            discord_bot=self.bot
        )

        _system_prompt = await Assistants.set_assistant_type("jakey_system_prompt", type=0)
        _result = await _infer.completion(prompt=prompt, system_instruction=_system_prompt)

        _system_embed = discord.Embed(
            title=prompt.replace("\n", " ")[:20] + "...",
            description=str(_result)[:4096],
            color=discord.Color.random()
        )
        _system_embed.set_footer(
            text="Responses generated by AI may not give accurate results! Double check with facts!"
        )

        if len(_result) > 4096:
            await ctx.respond(
                "‚ö†Ô∏è Response is too long. I saved your response as a markdown file.",
                file=discord.File(io.StringIO(_result), "response.md")
            )
        else:
            await ctx.respond(embed=_system_embed)

    @ask.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        _error = getattr(error, "original", error)
        if isinstance(_error, commands.CommandOnCooldown):
            await ctx.respond("üïí Woah slow down! Try again after a few seconds.")
        else:
            await ctx.respond(f"‚ùå Error occurred: `{type(_error).__name__}`")
        logging.error("Error in /ask:", exc_info=True)

async def setup(bot):
    await bot.add_cog(GeminiQuickChat(bot))